package no.uib.PMCExplorer.GUI;

import java.awt.Desktop;
import java.awt.Frame;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import static no.uib.PMCExplorer.Parser.ArticleParser.parsePubMedArticle;
import no.uib.PMCExplorer.Parser.ParsedElements;

/**
 * Class responsible for creating the single article inspection GUI. 
 * 
 * @author Markus Berggrav
 */
public class SingleArticle extends javax.swing.JFrame {
    private final String inputPmcId;
    private final String inputKeyWords;
    private ParsedElements articleElements;
    

    /**
     * Creates new form SingleArticle
     * @param articleElements
     * @param inputPmcId
     * @param inputKeyWords
     */
    public SingleArticle(ParsedElements articleElements, String inputPmcId, String inputKeyWords) {
        setDefaultLookAndFeelDecorated(true);
        this.inputPmcId = inputPmcId;
        this.inputKeyWords = inputKeyWords;
        this.articleElements = articleElements;
        initComponents();
        
       
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        tabbedPane = new javax.swing.JTabbedPane();
        jLabel1 = new javax.swing.JLabel();
        keywordScrollPane = new javax.swing.JScrollPane();
        keywordArea = new javax.swing.JTextArea();
        runButton = new javax.swing.JButton();
        notesButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("PMCExplorer");
        setExtendedState(Frame.MAXIMIZED_BOTH);
        setName("singleArticleFrame"); // NOI18N

        mainPanel.setBackground(new java.awt.Color(115, 147, 179));

        tabbedPane.setBackground(new java.awt.Color(102, 102, 102));

        jLabel1.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Input keywords:");

        keywordScrollPane.setForeground(new java.awt.Color(153, 153, 153));
        keywordScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        keywordArea.setBackground(new java.awt.Color(182, 208, 226));
        keywordArea.setColumns(20);
        keywordArea.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        keywordArea.setForeground(new java.awt.Color(51, 51, 51));
        keywordArea.setLineWrap(true);
        keywordArea.setRows(5);
        keywordArea.setWrapStyleWord(true);
        keywordArea.setPreferredSize(new java.awt.Dimension(240, 95));
        keywordArea.setText(inputKeyWords);
        keywordScrollPane.setViewportView(keywordArea);

        runButton.setBackground(new java.awt.Color(102, 102, 102));
        runButton.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        runButton.setForeground(new java.awt.Color(0, 0, 0));
        runButton.setText("RUN");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        notesButton.setBackground(new java.awt.Color(102, 102, 102));
        notesButton.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        notesButton.setForeground(new java.awt.Color(0, 0, 0));
        notesButton.setText("NOTES");
        notesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notesButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tabbedPane, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(keywordScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(53, 53, 53)
                                .addComponent(runButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(48, 48, 48)
                                .addComponent(notesButton)))
                        .addGap(0, 352, Short.MAX_VALUE)))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(notesButton, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
                    .addComponent(runButton, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
                    .addComponent(keywordScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 519, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Process article on buttonclick.
     * 
     * @param evt - actionevent.
     */
    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        openPanels();
    }//GEN-LAST:event_runButtonActionPerformed

    /**
     * Open the articles notes file. 
     * 
     * @param evt - actionevent.
     */
    private void notesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notesButtonActionPerformed
        // TODO add your handling code here:
        if (Desktop.isDesktopSupported()){
            File notesFile = new File("src/main/resources/downloads/" + inputPmcId + "/Article_Notes.txt");
            try {
                Desktop.getDesktop().edit(notesFile);
                } catch (IOException ex) {
                    System.out.println(ex.getMessage());}}
    }//GEN-LAST:event_notesButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SingleArticle(null,null,null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextArea keywordArea;
    private javax.swing.JScrollPane keywordScrollPane;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton notesButton;
    private javax.swing.JButton runButton;
    private javax.swing.JTabbedPane tabbedPane;
    // End of variables declaration//GEN-END:variables

    
    
    /**
     * Method responsible for initializing the TextPanel objects that will present the different article components
 in the TabbedPane.
     * 
     */
    public void openPanels(){
        
        if (!keywordArea.getText().equals("")){
            tabbedPane.removeAll();
            
            String[] updatedKeyWords = keywordArea.getText().replaceAll("'", "â€™").split(",");
            updatedKeyWords = Arrays.stream(updatedKeyWords).map(String::trim).toArray(String[] :: new);
            
            
            if (!Arrays.equals(updatedKeyWords, articleElements.getKeyWords())){
                this.articleElements = parsePubMedArticle(inputPmcId,updatedKeyWords);
            }
            
            
            new TextPanel(tabbedPane, articleElements.getAbstract(),"ABSTRACT");
            new TextPanel(tabbedPane, articleElements.getBody(), "BODY");
            new TextPanel(tabbedPane, articleElements.getRelevantSentences(), "SENTENCES");
            new TablePanel(tabbedPane, articleElements.getTables());
            
            
        }
        
    }
}
