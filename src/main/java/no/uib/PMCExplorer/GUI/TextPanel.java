// -------------------------------------------------------------------------------------------------------------------- //
// import libraries: 

package no.uib.PMCExplorer.GUI;

import java.awt.Color;
import java.awt.Desktop;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.*;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JEditorPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.TableModelEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import javax.swing.text.BadLocationException;
import no.uib.PMCExplorer.JTableRenderers.ComboBoxRenderer;
import no.uib.PMCExplorer.JTableRenderers.TableComboBoxRenderer;
import no.uib.PMCExplorer.TextNode.CustomHighlighter;
import no.uib.PMCExplorer.TextNode.TextNode;
import no.uib.jsparklines.renderers.JSparklinesBarChartTableCellRenderer;
import org.jfree.chart.plot.PlotOrientation;

// -------------------------------------------------------------------------------------------------------------------- //


/**
 * Class responsible for creating a panel with an input article segment and two frequency tables.
 * This panel is added to the tabbedpane created in the class SingleArticle().
 * 
 * @author Markus Berggrav
 */
public class TextPanel extends javax.swing.JPanel {
   
    
    TextNode textNode;
    Color[] highlightColors = {
            new Color(140,255,50),
            new Color(212,255,50),
            new Color(253,255,50),
            new Color(0,255,217),
            new Color(255,102,102)};
    int colorIndex = 0;
    
    
    /**
     * Constructor.
     *
     * @param tabbedPane - Input tabbedpane where the text tab will be stored
     * @param textNode - The textnode containing the text and text statistics.
     * @param windowTitle - The title of the current text segment ("Abstract", "Body", "Sentences").
     */
    public TextPanel(JTabbedPane tabbedPane, TextNode textNode, String windowTitle) {
        this.textNode = textNode;
        initComponents();
        
        tabbedPane.addTab(windowTitle, this);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        editorScrollPane = new javax.swing.JScrollPane();
        editorPane = new javax.swing.JEditorPane();
        keyWordFrequencyScrollPane = new javax.swing.JScrollPane();
        keyWordFrequencyTable = new javax.swing.JTable();
        allWordFrequencyScrollPane = new javax.swing.JScrollPane();
        allWordFrequencyTable = new javax.swing.JTable();
        keyWordTableHeader = new javax.swing.JLabel();
        AllWordtableHeader = new javax.swing.JLabel();

        setBackground(new java.awt.Color(182, 208, 226));

        editorScrollPane.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        editorPane.setEditable(false);
        editorPane.setEditorKit(JEditorPane.createEditorKitForContentType("text/html"));
        editorPane.setContentType("text/html");
        editorPane.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        editorPane.setText(textNode.getText());
        editorPane.addHyperlinkListener(new javax.swing.event.HyperlinkListener() {
            public void hyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {
                editorPaneHyperlinkUpdate(evt);
            }
        });
        editorPane.setCaretPosition(0);
        editorScrollPane.setViewportView(editorPane);

        keyWordFrequencyTable.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        keyWordFrequencyTable.setModel(initializeTableModel(1));
        setTableProperties(keyWordFrequencyTable);
        selectKeywords();
        keyWordFrequencyTable.setRowHeight(24);
        keyWordFrequencyTable.setRowSelectionAllowed(false);
        keyWordFrequencyTable.setShowGrid(true);
        keyWordFrequencyScrollPane.setViewportView(keyWordFrequencyTable);

        allWordFrequencyTable.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        allWordFrequencyTable.setModel(initializeTableModel(2));
        setTableProperties(allWordFrequencyTable);
        allWordFrequencyTable.setRowHeight(24);
        allWordFrequencyTable.setRowSelectionAllowed(false);
        allWordFrequencyTable.setShowGrid(true);
        allWordFrequencyScrollPane.setViewportView(allWordFrequencyTable);

        keyWordTableHeader.setFont(new java.awt.Font("Serif", 1, 18)); // NOI18N
        keyWordTableHeader.setText("Keyword Frequencies:");

        AllWordtableHeader.setFont(new java.awt.Font("Serif", 1, 18)); // NOI18N
        AllWordtableHeader.setText("Most Frequent Words:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(editorScrollPane)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(78, 78, 78)
                                .addComponent(keyWordTableHeader))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(80, 80, 80)
                                .addComponent(AllWordtableHeader)))
                        .addGap(117, 117, 117))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(595, 595, 595)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(keyWordFrequencyScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(allWordFrequencyScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addComponent(keyWordTableHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(keyWordFrequencyScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                .addGap(66, 66, 66)
                .addComponent(AllWordtableHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(allWordFrequencyScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                .addGap(138, 138, 138))
            .addComponent(editorScrollPane)
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Method for handling hyperlinks in the editorPane.
     * @param evt - actionevent.
     */
    private void editorPaneHyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {//GEN-FIRST:event_editorPaneHyperlinkUpdate
        if (HyperlinkEvent.EventType.ACTIVATED.equals(evt.getEventType())) {
        Desktop desktop = Desktop.getDesktop();
        try {
          desktop.browse(evt.getURL().toURI());
        } catch (IOException | URISyntaxException ex) {
        }
      }
    }//GEN-LAST:event_editorPaneHyperlinkUpdate


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AllWordtableHeader;
    private javax.swing.JScrollPane allWordFrequencyScrollPane;
    private javax.swing.JTable allWordFrequencyTable;
    private javax.swing.JEditorPane editorPane;
    private javax.swing.JScrollPane editorScrollPane;
    private javax.swing.JScrollPane keyWordFrequencyScrollPane;
    private javax.swing.JTable keyWordFrequencyTable;
    private javax.swing.JLabel keyWordTableHeader;
    // End of variables declaration//GEN-END:variables

   

    /**
     * Method responsible for initializing the tablemodels of the two tables.
     * 
     * @param nr - if nr = 1 initialize keyWordtable, else initialize allWordtable
     * @return - Tablemodel of the specified table.
     */
    private DefaultTableModel initializeTableModel(int nr) {
        Object[][] data;
        if (nr == 1) {
            data = createMatrix(textNode.getKeyWordFrequencies().keySet(), textNode.getKeyWordFrequencies().values());
        } else {
            data = createMatrix(textNode.getAllWordFrequencies().keySet(), textNode.getAllWordFrequencies().values());
        }

        String[] columnNames = {"Nr","Selected","Word", "Frequency", "Highlight"};

        DefaultTableModel model = new DefaultTableModel(data, columnNames) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return switch (column) {
                    case 1,3 -> true;
                    case 4 -> ((Boolean) getValueAt(row, 1)).booleanValue();
                    default -> false;
                };
            }

            @Override
            public Class getColumnClass(int columnIndex) {
                if (columnIndex == 1){
                    return Boolean.class;
                }
                return super.getColumnClass(columnIndex);
            }
            
        };
        
        return setTableModelListener(model);

    }
    /**
     * Create matrix with input words, frequencies and highligt functionalities.
     * 
     * 
     * @param wordSet
     * @param frequencySet
     * @return 
     */
    private Object[][] createMatrix(Set<String> wordSet, Collection<Integer> frequencySet) {

        List<String> words = new ArrayList<>(wordSet);
        List<Integer> frequencies = new ArrayList<>(frequencySet);

        Object[][] data = new Object[words.size()][5];
        for (int x = 0; x < words.size(); x++) {
            data[x][0] = x+1;
            data[x][1] = false;
            data[x][2] = words.get(x);
            data[x][3] = frequencies.get(x);
            data[x][4] = Color.white;
        }

        return data;

    }
    
    /**
     * Method responsible for customizing the tablemodellistener.
     * This model interacts with the editorPane and highlighter. 
     * 
     * @param model - Defaulttablemodel
     * @return - Updated defaultTableModel with implemented listener. 
     */
    private DefaultTableModel setTableModelListener(DefaultTableModel model){
        model.addTableModelListener(e -> {
            if (e.getType() == TableModelEvent.UPDATE)
            {
                int row = e.getFirstRow();
                int column = e.getColumn();
                TableModel model1 = (TableModel)e.getSource();
                String[] word = new String[] {model1.getValueAt(row,2).toString()};
                CustomHighlighter highlighter = new CustomHighlighter(editorPane);
                
                Color color = highlightColors[colorIndex];
                
                
                
                if (column == 1){
                    if ((Boolean) model1.getValueAt(row, column)){
                        model1.setValueAt(color, row, 4);
                        colorIndex += 1;
                        if (colorIndex == 3){
                            colorIndex = 0;
                        }
                    }
                    else{
                        color = Color.white;
                        model1.setValueAt(Color.white, row, 4);
                    }
                }
                if (column == 4){
                    color = (Color) model1.getValueAt(row,4);
                }
                
                try {
                        highlighter.highlightKeywords(word,color);
                    } catch (BadLocationException ex) {
                        throw new RuntimeException(ex);}
            }});

        return model;
        
    }

    /**
     * Method responsible for setting the column-renderers.
     * 
     * @param table 
     */
    private void setTableProperties(JTable table) {
        TableColumn frequencyColumn = table.getColumn("Frequency");
        frequencyColumn.setCellRenderer(new JSparklinesBarChartTableCellRenderer(PlotOrientation.HORIZONTAL, 200.0, Color.GREEN));
        ((JSparklinesBarChartTableCellRenderer) frequencyColumn.getCellRenderer()).showNumberAndChart(true, 40);

        TableColumn colorColumn = table.getColumn("Highlight");
        colorColumn.setCellRenderer(new TableComboBoxRenderer());
        JComboBox colorChooser = new JComboBox(highlightColors);
        colorChooser.setRenderer(new ComboBoxRenderer());
        colorColumn.setCellEditor(new DefaultCellEditor(colorChooser));
        
        
        
        
       
    }
    
    /**
     * Method responsible for initializing the keyword selection status from false to true. 
     * This will also highlight the keywords in the editorpane.
     */
    private void selectKeywords(){
        for (int i = 0; i < keyWordFrequencyTable.getRowCount(); i++){
            keyWordFrequencyTable.getModel().setValueAt(Boolean.valueOf(true), i, 1);
            ((DefaultTableModel) keyWordFrequencyTable.getModel()).fireTableCellUpdated(i, 1);
        }
       
        
    }

}
